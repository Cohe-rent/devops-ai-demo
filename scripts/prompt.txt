Generate a valid Terraform configuration using the `kreuzwerker/docker` provider.

Requirements:

1. Provider configuration:
   - Use this block:
     ```
     terraform {
       required_providers {
         docker = {
           source  = "kreuzwerker/docker"
           version = "~> 3.0.2"
         }
       }
     }
     ```

2. Create a Docker network resource:
   - Name it: `app-network`.

3. Define a Docker container named `nginx`:
   - Image: `nginx:latest`
   - Connect it to `app-network`
   - Map container port 80 to host port 8180 using:
     ```
     ports {
       internal = 80
       external = 8180
     }
     ```
   - Attach the container to the network using:
     ```
     networks_advanced {
       name = docker_network.app_network.name
     }
     ```
   - Add a correct `depends_on` block referencing the Docker network resource.

4. Define a Docker container named `flask_app`:
   - Image: `tiangolo/uwsgi-nginx-flask:python3.8`
   - Mount host directory `${path.module}/app` to `/app` in container using:
     ```
     volumes {
  host_path      = "${abspath(path.module)}/app"
  container_path = "/app"
     }
     ```
   - Map container port 5000 to host port 8100 using:
     ```
     ports {
       internal = 5000
       external = 8100
     }
     ```
   - Attach the container to the `app-network` using the same `networks_advanced` block format.
   - Include correct `depends_on`.

Ensure all HCL syntax is valid and the configuration is ready to run with `terraform init` and `terraform apply`.
