Generate a complete DevOps project that deploys a Python Flask backend and an NGINX frontend reverse proxy using Docker and Terraform.

### Requirements:

1. Use the `kreuzwerker/docker` provider in Terraform:
```hcl
terraform {
  required_providers {
    docker = {
      source  = "kreuzwerker/docker"
      version = "~> 3.0.2"
    }
  }
}

    Create a Docker network named app-network.

    Flask Application Container:

        Uses the tiangolo/uwsgi-nginx-flask:python3.8 base image.

        Mount host folder ${path.module}/scripts/app into /app inside container:

        volumes {
          host_path      = "${abspath(path.module)}/scripts/app"
          container_path = "/app"
        }

        Maps internal port 5000 to external port 8100.

        Uses networks_advanced to attach to app-network.

        Includes depends_on = [docker_network.app_network].

    NGINX Reverse Proxy Container:

        Uses nginx:latest image.

        Mount custom NGINX config from ${path.module}/scripts/nginx/default.conf to /etc/nginx/conf.d/default.conf.

        Maps internal port 80 to external port 8180.

        Uses networks_advanced and depends_on = [docker_network.app_network].

    File structure:

devops-ai-demo/
├── main.tf                   # Terraform script
├── Dockerfile-flask          # Optional Dockerfile for Flask app
├── scripts/
│   ├── app/
│   │   ├── app.py
│   │   └── requirements.txt
│   └── nginx/
│       ├── default.conf
│       └── Dockerfile        # Custom NGINX build (if needed)

    Flask app: app.py should respond with:

@app.route("/")
def hello():
    return "✅ Hello from Flask!"

    NGINX config (default.conf) should reverse proxy / to Flask app on flask_app:5000.
